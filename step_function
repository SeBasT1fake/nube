{
  "Comment": "Pipeline automatizado para proyecto Telemática - Captura, ETL y Análisis",
  "StartAt": "DataIngestionParallel",
  "States": {
    "DataIngestionParallel": {
      "Type": "Parallel",
      "Comment": "Captura de datos en paralelo desde múltiples fuentes",
      "Branches": [
        {
          "StartAt": "IngestWeatherAPI",
          "States": {
            "IngestWeatherAPI": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "weather-api-ingestion",
                "Payload": {
                  "source": "weather-api",
                  "cities": ["Medellin", "Bogota", "Cali", "Barranquilla", "Cartagena"],
                  "date_range": {
                    "start": "2024-01-01",
                    "end": "2024-12-31"
                  }
                }
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ]
            }
          }
        },
        {
          "StartAt": "IngestDatabaseData",
          "States": {
            "IngestDatabaseData": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "database-extraction",
                "Payload": {
                  "tables": ["cities", "stations", "weather_alerts"],
                  "database": "weather_db"
                }
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ]
            }
          }
        }
      ],
      "Next": "CreateEMRCluster"
    },
    "CreateEMRCluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:createCluster.sync",
      "Parameters": {
        "Name": "Weather-Analytics-Cluster",
        "ReleaseLabel": "emr-6.15.0",
        "Applications": [
          { "Name": "Spark" },
          { "Name": "Hadoop" }
        ],
        "ServiceRole": "EMR_DefaultRole",
        "JobFlowRole": "EMR_EC2_DefaultRole",
        "Instances": {
          "InstanceGroups": [
            {
              "Name": "Master",
              "Market": "ON_DEMAND",
              "InstanceRole": "MASTER",
              "InstanceType": "m5.xlarge",
              "InstanceCount": 1
            },
            {
              "Name": "Worker",
              "Market": "ON_DEMAND",
              "InstanceRole": "CORE",
              "InstanceType": "m5.large",
              "InstanceCount": 2
            }
          ],
          "Ec2KeyName": "llave2",
          "KeepJobFlowAliveWhenNoSteps": true,
          "TerminationProtected": false
        },
        "LogUri": "s3://proyecto3-eafit-raw/logs/",
        "VisibleToAllUsers": true
      },
      "ResultPath": "$.ClusterInfo",
      "Next": "ETLProcessing"
    },
    "ETLProcessing": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Parameters": {
        "ClusterId.$": "$.ClusterInfo.ClusterId",
        "Step": {
          "Name": "ETL-Weather-Data",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode", "cluster",
              "s3://proyecto3-eafit-scripts/etl_weather_data.py"
            ]
          }
        }
      },
      "ResultPath": "$.ETLResult",
      "Next": "DataValidation"
    },
    "DataValidation": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "Parameters": {
        "ClusterId.$": "$.ClusterInfo.ClusterId",
        "Step": {
          "Name": "Validate-ETL-Results",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode", "cluster",
              "s3://proyecto3-eafit-scripts/check_parquet.py"
            ]
          }
        }
      },
      "ResultPath": "$.ValidationResult",
      "Next": "AnalyticsProcessing"
    },
    "AnalyticsProcessing": {
      "Type": "Parallel",
      "Comment": "Procesos analíticos en paralelo",
      "Branches": [
        {
          "StartAt": "DescriptiveAnalytics",
          "States": {
            "DescriptiveAnalytics": {
              "Type": "Task",
              "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
              "Parameters": {
                "ClusterId.$": "$.ClusterInfo.ClusterId",
                "Step": {
                  "Name": "Descriptive-Analytics",
                  "ActionOnFailure": "CONTINUE",
                  "HadoopJarStep": {
                    "Jar": "command-runner.jar",
                    "Args": [
                      "spark-submit",
                      "--deploy-mode", "cluster",
                      "s3://proyecto3-eafit-scripts/descriptive_analytics.py"
                    ]
                  }
                }
              },
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.AnalyticsResults",
      "Next": "TerminateCluster"
    },
    "TerminateCluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:terminateCluster",
      "Parameters": {
        "ClusterId.$": "$.ClusterInfo.ClusterId"
      },
      "End": true
    }
  }
}
